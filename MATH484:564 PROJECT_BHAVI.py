# -*- coding: utf-8 -*-
"""MATH484/564 PROJECT BHAVI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13WLjn6qKMLzTdWyt2FLOEcrKk-GpPLDm
"""

import pandas as pd
import numpy as np
import statsmodels.api as sm
import seaborn as sn
import matplotlib.pyplot as plt
import math
from sklearn import preprocessing
from sklearn.preprocessing import StandardScaler
from numpy import linalg as LA
from sklearn.decomposition import PCA
import statistics
from sklearn.preprocessing import scale 
from sklearn import model_selection
from sklearn.model_selection import RepeatedKFold
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

df = pd.read_csv('/content/Linthall.csv',index_col='OBS')
df.head()

"""## PART-1

#OLS
"""

y = df['BIO']
X = df[['H2S', 'SAL', 'Eh7', 'pH', 'BUF', 'P', 'K', 'Ca', 'Mg', 'Na', 'Mn', 'Zn', 'Cu', 'NH4']]
XOLS = sm.add_constant(X)
e = sm.OLS(y, XOLS).fit()
e.summary()

"""#Collinearity"""

corr_matrix = X.corr()
corr_matrix.columns
corr_matrix = corr_matrix[['H2S', 'SAL', 'Eh7', 'pH', 'BUF', 'P', 'K', 'Ca', 'Mg', 'Na', 'Mn', 'Zn', 'Cu', 'NH4']]
sn.heatmap(corr_matrix, annot=True)
plt.show()

corr_matrix.to_csv("corrMatrix.csv")

corr_matrix

eig_val, eig_vec = LA.eig(corr_matrix.values)
eig_vec

eig_val

idx = eig_val.argsort()[::-1]   
eig_val = eig_val[idx]
eig_vec = eig_vec[:,idx]

a = eig_val[0]
a = []
for j in range(14):
  condition = math.sqrt(a/eig_val[j])
  a.append(condition)
a

"""#Part II"""

standard_X = preprocessing.scale(X)
standard_y = preprocessing.scale(y)

PC = np.matmul(standard_X,eigenvectors)

principalDf = pd.DataFrame(data = PC, columns = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14'])
 principalDf.head()

import statistics
cols = ['C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11', 'C12', 'C13', 'C14']
vals = []
for pc in cols:
  var = statistics.pvariance(principalDf[pc])
  vals.append(var)
vals

e = sm.OLS(standard_y,principalDf).fit()
alphas = e.params.copy()
e.summary()

e = sm.OLS(standard_y,standard_X).fit()
thetas = e.params.copy()
e.summary()

df_pc = pd.DataFrame()
for col in principalDf:
  df_pc = pd.concat([df_pc,principalDf[col]], axis=1)
  model = sm.OLS(standard_y, df_pc).fit()
  print("model with regression up to",col,'R^2=', round(model.rsquared,4))

idx = eig_val.argsort()[::-1]   
eigenvalues = eig_val[idx]
eigenvectors = eig_vec[:,idx]

thetas=pd.DataFrame()
alphas = np.asarray(alphas)

alpha1 = np.array([alphas[0],0,0,0,0,0,0,0,0,0,0,0,0,0])
theta1 = np.matmul(eigenvectors,alpha1)
theta1 = np.array([round(i,3) for i in theta1])
thetas['model 1'] = theta1.tolist()

alpha2 = np.array([alphas[0],alphas[1],0,0,0,0,0,0,0,0,0,0,0,0])
theta2 = np.matmul(eigenvectors,alpha2)
theta2 = np.array([round(i,3) for i in theta2])
thetas['model 2'] = theta2.tolist()

alpha3 = np.array([alphas[0],alphas[1],alphas[2],0,0,0,0,0,0,0,0,0,0,0])
theta3 = np.matmul(eigenvectors,alpha3)
theta3 = np.array([round(i,3) for i in theta3])
thetas['model 3'] = theta3.tolist()

alpha4 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],0,0,0,0,0,0,0,0,0,0])
theta4 = np.matmul(eigenvectors,alpha4)
theta4 = np.array([round(i,3) for i in theta4])
thetas['model 4'] = theta4.tolist()

alpha5 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],0,0,0,0,0,0,0,0,0])
theta5 = np.matmul(eigenvectors,alpha5)
theta5 = np.array([round(i,3) for i in theta5])
thetas['model 5'] = theta5.tolist()

alpha6 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],0,0,0,0,0,0,0,0])
theta6 = np.matmul(eigenvectors,alpha6)
theta6 = np.array([round(i,3) for i in theta6])
thetas['model 6'] = theta6.tolist()

alpha7 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],0,0,0,0,0,0,0])
theta7 = np.matmul(eigenvectors,alpha7)
theta7 = np.array([round(i,3) for i in theta7])
thetas['model 7'] = theta7.tolist()

alpha8 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],0,0,0,0,0,0])
theta8 = np.matmul(eigenvectors,alpha8)
theta8 = np.array([round(i,3) for i in theta8])
thetas['model 8'] = theta8.tolist()

alpha9 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],0,0,0,0,0])
theta9 = np.matmul(eigenvectors,alpha9)
theta9 = np.array([round(i,3) for i in theta9])
thetas['model 9'] = theta9.tolist()

alpha10 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],alphas[9],0,0,0,0])
theta10 = np.matmul(eigenvectors,alpha10)
theta10 = np.array([round(i,3) for i in theta10])
thetas['model 10'] = theta10.tolist()

alpha11 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],alphas[9],alphas[10],0,0,0])
theta11 = np.matmul(eigenvectors,alpha11)
theta11 = np.array([round(i,3) for i in theta11])
thetas['model 11'] = theta11.tolist()

alpha12 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],alphas[9],alphas[10],alphas[11],0,0])
theta12 = np.matmul(eigenvectors,alpha12)
theta12 = np.array([round(i,3) for i in theta12])
thetas['model 12'] = theta12.tolist()

alpha13 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],alphas[9],alphas[10],alphas[11],alphas[12],0])
theta13 = np.matmul(eigenvectors,alpha13)
theta13 = np.array([round(i,3) for i in theta13])
thetas['model 13'] = theta13.tolist()

alpha14 = np.array([alphas[0],alphas[1],alphas[2],alphas[3],alphas[4],alphas[5],alphas[6],alphas[7],alphas[8],alphas[9],alphas[10],alphas[11],alphas[12],alphas[13]])
theta14 = np.matmul(eigenvectors,alpha14)
theta14 = np.array([round(i,3) for i in theta14])
thetas['model 14'] = theta14.tolist()

thetas.to_csv("thetas.csv")

thetas

xmean,xstd = X.mean(),X.std()
ymean, ystd = y.mean(), y.std()

xstd

beta = []
for i in range(0,14):
  std = 660.07852628172673/xstd[i]
  theta_ = theta11[i]
  beta_ = std*thet
  beta.append(bet_)

beta

sums = []
for i in range(0,14):
  su = beta[i]*xmean[i]
  sums.append(su)
beta0 = ymean - sum(sums)

beta0

"""#Part III"""

data = pd.read_csv('/content/linth5.csv')

data.columns

y = data['BIO']
X = data[['SAL', 'pH', 'K', 'Na', 'Zn']]

X = sm.add_constant(X)

e = sm.OLS(y, X[['const','SAL']]).fit()
print(est.pvalues)
e = sm.OLS(y, X[['const','pH']]).fit()
print(est.pvalues)
e = sm.OLS(y, X[['const','K']]).fit()
print(est.pvalues)
e = sm.OLS(y, X[['const','Na']]).fit()
print(est.pvalues)
e = sm.OLS(y, X[['const','Zn']]).fit()
print(est.pvalues)

e = sm.OLS(y, X[['const','pH','SAL']]).fit()
print(e.pvalues)
e = sm.OLS(y, X[['const','pH','K']]).fit()
print(e.pvalues)
e = sm.OLS(y, X[['const','pH','Na']]).fit()
print(e.pvalues)
e = sm.OLS(y, X[['const','pH','Zn']]).fit()
print(e.pvalues)

e = sm.OLS(y, X[['const','pH','Na','SAL']]).fit()
print(e.pvalues)
e = sm.OLS(y, X[['const','pH','Na','K']]).fit()
print(e.pvalues)
e = sm.OLS(y, X[['const','pH','Na','Zn']]).fit()
print(e.pvalues)

"""##Subset Method and VIF"""

e = sm.OLS(y,X).fit()
s = e.mse_resid
e.summary()

e = sm.OLS(y, X[['const','SAL','pH']]).fit()
sse = np.sum((e.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','SAL','K']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','SAL','Na']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','SAL','Zn']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','pH','K']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','pH','Na']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','pH','Zn']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','K','Na']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','K','Zn']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)
e = sm.OLS(y, X[['const','Na','Zn']]).fit()
sse = np.sum((est.fittedvalues - data.BIO)**2)
cp = sse/s + (6-45)
print(cp)

from statsmodels.stats.outliers_influence import variance_inflation_factor
model1 = X[['const','pH','K']]
model2 = X[['const','pH','Na']]
vif_data = pd.DataFrame()
vif_data["feature"] = model1.columns
  
vif_data["VIF"] = [variance_inflation_factor(model1.values, i)
                          for i in range(len(model1.columns))]
print(vif_data)
vif_data = pd.DataFrame()
vif_data["feature"] = model2.columns
vif_data["VIF"] = [variance_inflation_factor(model2.values, i)
                          for i in range(len(model2.columns))]
print(vif_data)